@page "/"
@using GherkinBuilder.Services
@using Microsoft.AspNetCore.Components.Forms
@using GherkinBuilder.Models
@using System.Text.Json
@inject StepLibraryService StepLibraryService
@inject NavigationManager Navigation

<div class="container py-5 d-flex flex-column min-vh-100 justify-content-between" data-testid="home-container">
    <div>
        <h2 class="fw-bold text-cucumber mb-4" data-testid="title">Welcome to Gherkin Feature Builder</h2>

        <p class="lead" data-testid="subtitle">
            This tool allows you to visually create <code class="text-danger">.feature</code> files using your project's existing step definitions.
        </p>

        <hr />

        <h4 class="mb-3" data-testid="how-it-works-title">How it Works</h4>

        <ol class="mb-4" data-testid="how-it-works-list">
            <li data-testid="step-upload">
                <strong>Upload</strong> your <code class="text-warning">steps.json</code> file generated by the
                <a href="https://www.nuget.org/packages/stepreport.cli" target="_blank">stepreport.cli</a> tool.
            </li>
            <li data-testid="step-search">
                <strong>Search and select</strong> step definitions categorized by Given, When, and Then.
            </li>
            <li data-testid="step-generate">
                <strong>Auto-generate</strong> a Gherkin feature file ready to download and use.
            </li>
        </ol>

        <InputFile OnChange="OnInputFileChange" class="form-control mb-2" data-testid="file-upload" />

        <div class="d-flex justify-content-end mt-2">
            <button class="btn btn-outline-success" @onclick="LoadSampleSteps" data-testid="load-sample-btn">
                🧪 Load Sample Steps
            </button>
        </div>

        @if (!string.IsNullOrEmpty(UploadMessage))
        {
            <div class="mt-2 text-@MessageColor" data-testid="upload-message">
                @UploadMessage
            </div>
        }

        @if (ShowProcessButton)
        {
            <button class="btn btn-success mt-2" @onclick="ParseUploadedFile" data-testid="process-button">
                Upload & Continue
            </button>
        }

        <div class="text-center mt-4 mb-3 text-muted">
            <a href="https://github.com/IatrouNick/stepreport.cli" target="_blank" data-testid="github-link">
                View <strong>stepreport.cli</strong> on GitHub
            </a>
        </div>
    </div>
</div>

@code {
    IBrowserFile? uploadedFile;
    string UploadMessage = string.Empty;
    string MessageColor = "danger";
    bool ShowProcessButton = false;

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        UploadMessage = string.Empty;
        ShowProcessButton = true;
    }

    private async Task ParseUploadedFile()
    {
        if (uploadedFile is null) return;

        try
        {
            using var stream = uploadedFile.OpenReadStream(maxAllowedSize: 5_000_000); // 5 MB max
            var steps = await JsonSerializer.DeserializeAsync<List<StepDefinition>>(stream);

            if (steps is not null && steps.Any())
            {
                StepLibraryService.Load(steps);
                UploadMessage = $"✔️ {steps.Count} steps loaded!";
                MessageColor = "success";
                Navigation.NavigateTo("/create-feature");
            }
            else
            {
                UploadMessage = "❌ No steps found in the uploaded file.";
                MessageColor = "danger";
            }
        }
        catch (Exception ex)
        {
            UploadMessage = "❌ Failed to parse the file. Make sure it's a valid steps.json.";
            MessageColor = "danger";
            Console.WriteLine(ex.Message);
        }
    }

    private async Task LoadSampleSteps()
    {
        try
        {
            var http = new HttpClient { BaseAddress = new Uri(Navigation.BaseUri) };
            var json = await http.GetStringAsync("sample-steps.json");

            var sampleSteps = JsonSerializer.Deserialize<List<StepDefinition>>(json);
            if (sampleSteps is not null && sampleSteps.Any())
            {
                StepLibraryService.Load(sampleSteps);
                Navigation.NavigateTo("/create-feature");
            }
            else
            {
                Console.WriteLine("⚠️ Sample file is empty or invalid.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Failed to load sample steps: {ex.Message}");
        }
    }

}

<style>
    .text-cucumber {
        color: #6AAA64;
    }

    code.text-warning {
        color: #e0a800;
    }

    body {
        background: linear-gradient(to bottom right, #f8fdf7, #e6f9eb);
    }

    footer {
        font-size: 0.95rem;
        color: #333;
    }
</style>